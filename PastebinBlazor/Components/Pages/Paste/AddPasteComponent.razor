@page "/addpaste"

@rendermode InteractiveServer

@inject PastebinLogic.Services.Interfaces.IAddPasteService AddPasteService
@inject AutoMapper.IMapper Mapper
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>
    @Title
</PageTitle>

<div class="container">
    <div class="row row-cols-1">
        <div class="col text-center">
            <h1>@Title</h1>
        </div>
    </div>

    <EditForm EditContext="@_editContext" OnValidSubmit="OnValidSubmit" FormName="AddPaste">
        <DataAnnotationsValidator />

        <div class="row">
            <div class="col-12 mt-5">
                <div class="form-floating @GetFieldCssClass(() => _model.Name)">
                    <InputText @bind-Value="_model.Name" id="PasteName" class="form-control"
                               placeholder="Name" aria-describedby="validationPasteName" />
                    <label for="PasteName">Paste name</label>
                </div>
                <ValidationMessage For="@(() => _model.Name)" id="validationPasteName" class="invalid-feedback" />
            </div>

            <div class="col-12 mt-2">
                <div class="form-floating @GetFieldCssClass(() => _model.Content)">
                    <InputTextArea @bind-Value="_model.Content" id="PasteContent" class="form-control" style="height: 100px"
                                   placeholder="Content" aria-describedby="validationPasteContent" />
                    <label for="PasteContent">Paste content</label>
                </div>
                <ValidationMessage For="@(() => _model.Content)" id="validationPasteContent" class="invalid-feedback" />
            </div>

            <div class="col-12 mt-2">
                <div class="input-group has-validation">
                    <div class="form-floating @GetFieldCssClass(() => _model.ExpirationDate)">
                        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="_model.ExpirationDate" id="PasteExpirationDate" class="form-control"
                                   aria-describedby="validationPasteExpirationDate" />
                        <label for="PasteExpirationDate">Expiration date</label>
                    </div>

                    <div class="form-floating">
                        <InputSelect @bind-Value="_model.Visibility" class="form-select" id="PasteVisibiliti">
                            <option value="@PasteVisibility.Public" selected>Public</option>
                            <option value="@PasteVisibility.Link">Private</option>
                        </InputSelect>
                        <label for="PasteVisibiliti">Paste visibiliti</label>
                    </div>

                    <span class="input-group-text"> Burn on read</span>
                    <div class="input-group-text @GetFieldCssClass(() => _model.BurnOnRead)">
                        @if (_model.Visibility == PasteVisibility.Link)
                        {
                            <InputCheckbox @bind-Value="_model.BurnOnRead"
                                           aria-describedby="validationPasteBurnOnRead" />
                        }
                        else
                        {
                            <InputCheckbox @bind-Value="_model.BurnOnRead" disabled
                                           aria-describedby="validationPasteBurnOnRead" />
                        }
                    </div>

                    <ValidationMessage For="@(() => _model.ExpirationDate)" id="validationPasteExpirationDate" class="invalid-feedback" />
                    <ValidationMessage For="@(() => _model.BurnOnRead)" id="validationPasteBurnOnRead" class="invalid-feedback" />
                </div>
            </div>

            <div class="col-12 mt-2">
                <div class="input-group has-validation">
                    <span class="input-group-text">Password protected</span>

                    <div class="input-group-text @GetFieldCssClass(() => _model.PasswordProtected)">
                        @if (_model.Visibility == PasteVisibility.Link)
                        {
                            <InputCheckbox @bind-Value="_model.PasswordProtected"
                                           aria-describedby="validationPastePasswordProtected" />
                        }
                        else
                        {
                            <InputCheckbox @bind-Value="_model.PasswordProtected" disabled
                                           aria-describedby="validationPastePasswordProtected" />
                        }
                    </div>
                    <ValidationMessage For="@(() => _model.PasswordProtected)" id="validationPastePasswordProtected" class="invalid-feedback" />

                    <div class="form-floating @GetFieldCssClass(() => _model.Password)">

                        @if (_model.PasswordProtected)
                        {
                            <InputText @bind-Value="_model.Password" type="password" class="form-control" id="PastePassword" placeholder="abc"
                                       aria-describedby="validationPastePassword" />
                        }
                        else
                        {
                            <InputText @bind-Value="_model.Password" type="password" class="form-control" id="PastePassword" placeholder="abc" disabled
                                       aria-describedby="validationPastePassword" />
                        }

                        <label for="PastePassword">Password</label>
                    </div>
                    <ValidationMessage For="@(() => _model.Password)" id="validationPastePassword" class="invalid-feedback" />
                </div>
            </div>

            <div class="col-3 mt-2 d-flex">
                @if (!_pasteAdded)
                {
                    <button class="btn btn-primary flex-fill" type="submit">Create paste</button>
                }
                else
                {
                    <button class="btn btn-primary flex-fill" type="submit" disabled>Create paste</button>
                }
            </div>
        </div>
    </EditForm>

    @if (!string.IsNullOrWhiteSpace(_addPasteErrorMessage))
    {
        <div class="row row-cols-1">
            <div class="col text-center mt-5">
                <p class="fs-4 text-danger">@_addPasteErrorMessage</p>
            </div>
        </div>
    }
    else if (_pasteAdded)
    {
        <div class="row">
            <div class="col-12 text-center mt-5">
                <h2>Paste created!</h2>
            </div>

            <div class="col-12 text-center mt-3">
                <p>
                    <span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                        </svg>
                    </span>
                    <span>Use the link below to open the paste.</span>
                    <span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                            <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1" />
                        </svg>
                    </span>
                </p>
            </div>

            <div class="col-10 text-center border border-2 border-success rounded-2">
                <p class="pt-3">@_pasteLink</p>
            </div>

            <div class="col-2 d-flex">
                <button class="btn btn-primary flex-fill" type="button" @onclick="CopyPasteLinkToClipboard">
                    <span>Copy to clipboard</span>
                    <span>
                        @if (!_pasteLinkCopied)
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard" viewBox="0 0 16 16">
                                <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1z" />
                                <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0z" />
                            </svg>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard-check" viewBox="0 0 16 16">
                                <path fill-rule="evenodd" d="M10.854 7.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7.5 9.793l2.646-2.647a.5.5 0 0 1 .708 0z" />
                                <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1z" />
                                <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0z" />
                            </svg>
                        }
                    </span>
                </button>
            </div>
        </div>

        <div class="row">
            <div class="col-3 mt-2 d-flex">
                <button class="btn btn-warning flex-fill" type="button" @onclick="ClearPaste">Create new paste </button>
            </div>
        </div>
    }
</div>

@code {
    const string Title = "Create paste";

    private EditContext? _editContext;
    private AddPasteModel _model = new AddPasteModel();

    private bool _pasteAdded;
    private bool _pasteLinkCopied;
    private string? _pasteLink;

    private string? _addPasteErrorMessage;

    protected override void OnInitialized()
    {
        _editContext = new(_model);
        _editContext.SetFieldCssClassProvider(new BootstrapFieldClassProvider());
    }

    private async Task OnValidSubmit()
    {
        try
        {
            var dto = Mapper.Map<AddPasteModel, AddPasteDto>(_model);
            var resultDto = await AddPasteService.AddPasteAsync(dto);

            _pasteLink = NavigationManager.ToAbsoluteUri($"/paste/{resultDto.Id}").ToString();

            _addPasteErrorMessage = null;
            _pasteAdded = true;
        }
        catch
        {
            _addPasteErrorMessage = "An error occurred while adding the paste. Please try again later.";
        }
    }

    private void ClearPaste()
    {
        _model = new();
        _editContext = new(_model);
        _pasteLink = null;
        _pasteAdded = false;
        _pasteLinkCopied = false;
    }

    private async Task CopyPasteLinkToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", _pasteLink);

        _pasteLinkCopied = true;
    }

    private string GetFieldCssClass<TField>(System.Linq.Expressions.Expression<Func<TField>> field) => _editContext!.FieldCssClass(field);
}
